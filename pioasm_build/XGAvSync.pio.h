// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// XGAhSync //
// -------- //

#define XGAhSync_wrap_target 1
#define XGAhSync_wrap 11

static const uint16_t XGAhSync_program_instructions[] = {
    0xe05f, //  0: set    y, 31                      
            //     .wrap_target
    0xe031, //  1: set    x, 17                      
    0xfe00, //  2: set    pins, 0                [30]
    0x0042, //  3: jmp    x--, 2                     
    0xef01, //  4: set    pins, 1                [15]
    0xe034, //  5: set    x, 20                      
    0xfe01, //  6: set    pins, 1                [30]
    0x0046, //  7: jmp    x--, 6                     
    0xc001, //  8: irq    nowait 1                   
    0xa022, //  9: mov    x, y                       
    0xe001, // 10: set    pins, 1                    
    0x004a, // 11: jmp    x--, 10                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program XGAhSync_program = {
    .instructions = XGAhSync_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config XGAhSync_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + XGAhSync_wrap_target, offset + XGAhSync_wrap);
    return c;
}

static inline void XGAhSync_program_init(PIO pio, uint sm, uint offset, uint pin) {
    // creates state machine configuration object c,
    // sets to default configurations.
    pio_sm_config c = XGAhSync_program_get_default_config(offset);
    // Map the state machine's OUT pin group to one pin, the `pin`
    // parameter to this function is the lowest one.
    sm_config_set_out_pins(&c, pin, 0);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin + 0);
    // Set the pin direction to output at the PIO (0 pins)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 0, true);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running 
    pio_sm_set_enabled(pio, sm, true);
}

#endif

